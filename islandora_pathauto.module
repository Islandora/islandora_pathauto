<?php

/**
 * @file
 * Exposes Islandora object urls to pathauto,
 * so that if a pattern is configured, then
 * aliases are updated automatically on object
 * ingest/modify/purge.
 *
 * Also enables batch creation/updates of aliases.
 */

/**
 * Implements hook_menu().
 */
function islandora_pathauto_menu() {
  $items['admin/islandora/tools/islandora-pathauto'] = array(
    'title' => 'Pathauto',
    'description' => 'Configure settings for the Islandora Pathauto module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_pathauto_admin_settings'),
    'access arguments' => array('administer islandora_pathauto'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_pathauto_permission() {
  return array(
    'administer islandora_pathauto' => array(
      'title' => t('Administer Islandora Pathauto'),
      'description' => t('Select content models available for custom Islandora Pathauto patterns.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_pathauto_theme() {
  return array(
    'islandora_pathauto_admin_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_pathauto().
 */
function islandora_pathauto_pathauto($op) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $settings = new stdClass();
  $settings->module = 'islandora';
  $settings->groupheader = t('Islandora object paths');
  $settings->patterndescr = t('All Islandora objects (except those with custom paths specified below)');
  $settings->patterndefault = '';
  $settings->token_type = 'fedora';
  $settings->patternitems = array();
  $settings->batch_update_callback = 'islandora_pathauto_pathauto_bulkupdate';
  $all_cmodels = islandora_get_content_models();
  $pathauto_cmodels = variable_get('islandora_pathauto_selected_cmodels', array());
  $cmodels = array();
  foreach ($all_cmodels as $key => $value) {
    if (in_array($key, $pathauto_cmodels)) {
      $cmodels[$key] = $value;
    }
  }
  foreach ($cmodels as $cmodel) {
    $settings->patternitems[$cmodel['pid']] = t('Custom pattern for @cmodel objects', array("@cmodel" => $cmodel['label']));
  }
  return $settings;
}

/**
 * Wrapper to pathauto_create_alias().
 *
 * @param FedoraObject|IslandoraFedoraObjectReadOnly $object
 *   an Islandora object
 *
 * @param string $op
 *   The operation to perform: 'insert' or 'update'.
 *
 * @return int
 *   Returns the number of aliases generated from this object;
 *   may be >1 if the object has multiple content models.
 */
function islandora_pathauto_create_alias($object, $op) {
  module_load_include('inc', 'pathauto');
  $path = 'islandora/object/' . $object->id;
  $count = 0;
  // Give priority to any cmodels that are enabled for pathauto.
  $all_enabled = variable_get('islandora_pathauto_selected_cmodels', array());
  $models = array_intersect($object->models, $all_enabled);
  if (!$models) {
    $models = $object->models;
  }
  foreach ($models as $cmodel) {
    $result = pathauto_create_alias('islandora', $op, $path, array('fedora' => $object), $cmodel);
    if ($result != '') {
      $count++;
    }
  }
  return $count;
}

/**
 * Implements hook_islandora_object_ingested().
 */
function islandora_pathauto_islandora_object_ingested($object) {
  islandora_pathauto_create_alias($object, 'insert');
}

/**
 * Implements hook_islandora_object_alter().
 */
function islandora_pathauto_islandora_object_alter($original, $context) {

  // If the label is what was modified, then
  // the $original does not have the new label yet.
  // This is a nasty fix to get it from $context.
  // See ISLANDORA-1072.
  $object = new IslandoraFedoraObjectReadOnly($original);
  if (isset($context['action']) and $context['action'] == 'modify') {
    if (isset($context['params']['label'])) {
      $object->label = $context['params']['label'];
    }
  }
  islandora_pathauto_create_alias($object, 'update');
}

/**
 * Implements hook_islandora_object_purged().
 */
function islandora_pathauto_islandora_object_purged($pid) {
  pathauto_path_delete_all('islandora/object/' . $pid);
}

/**
 * Gets the module results based on the type of query language specified by islandora_pathauto_query_language
 *
 *
 * @return array 
 *   results of object, title, cmodel 
 */
function islandora_pathauto_get_module_results() {
  // step 1, get the enabled models
  $models = variable_get('islandora_pathauto_selected_cmodels', array());
  // depending on the query language, get the result records that match the enabled models 
  $query_language = variable_get('islandora_pathauto_query_language', 'islandora_basic_collection_sparql_query_backend');
  if ($query_language == 'islandora_basic_collection_sparql_query_backend') {
    $first_contentmodel = array_shift($models);
    $unions = '';
    foreach ($models as $contentmodel) {
      $unions .= 'UNION {
              $object <fedora-model:label> $title ;
              <fedora-model:hasModel> $cmodel ;
              <fedora-model:state> <fedora-model:Active> .
              FILTER(sameTerm($cmodel, <info:fedora/'.$contentmodel.'>))}
              }';
    }
    $query = 'SELECT $object $title $cmodel
          FROM <#ri>
          WHERE { {
              $object <fedora-model:label> $title ;
              <fedora-model:hasModel> $cmodel ;
              <fedora-model:state> <fedora-model:Active> .
              FILTER(sameTerm($cmodel, <info:fedora/'.$first_contentmodel.'>))
              }'.
      $unions.'
              ORDER BY $title';
    $tuque = islandora_get_tuque_connection();
    if ($tuque) {
      try {
        $results = $tuque->repository->ri->query($query, 'sparql');
        return $results;
      }
      catch (Exception $e) {
        return array();
      }
    } else {
      IslandoraTuque::getError();
    }
  } elseif ((module_exists('islandora_solr') == true) && ($query_language == 'islandora_solr_query_backend')) {
    module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
    $query_processor = new IslandoraSolrQueryProcessor();
    $query_processor->solrQuery = 'RELS_EXT_hasModel_uri_s:(*'.str_replace(":", "\:", implode(" OR *", $models)).')';
    $query_processor->solrStart = 0;
    $query_processor->solrLimit = 1000;
    $query_processor->solrParams = array(
      // fl = $object $title $cmodel
      'fl' => "PID,fgs_label_mt,RELS_EXT_hasModel_uri_s",
      'fq' => "",
    );
    $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
    $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
    $solr->setCreateDocuments(FALSE);
    try {
      $results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
      $tmp = json_decode($results->getRawResponse(), true);
      $results = array();
      foreach ($tmp['response']['docs'] as $trip) {
        $results[]['object']['value'] = $trip['PID'];
      }
      return $results;
    } catch (Exception $e) {
      return array();
    }
  }
}
  
/**
 * Implements hook_pathauto_bulkupdate().
 */
function islandora_pathauto_pathauto_bulkupdate() {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $results = islandora_pathauto_get_module_results();
  try {
    $count = 0;
    foreach ($results as $result) {
      $pid = $result['object']['value'];
      $object = islandora_object_load($pid);
      $result = islandora_pathauto_create_alias($object, 'bulkupdate');
      if ($result != '') {
        $count += $result;
      }
    }
    drupal_set_message($count . ' islandora aliases were updated.');
  } catch (Exception $e) {
    if ($e->getCode() == '404') {
      return FALSE;
    }
    else {
      return NULL;
    }
  }
  // Assuming access denied in all other cases for now.
  return NULL;
}


/**
 * Implements hook_path_alias_types().
 */
function islandora_pathauto_path_alias_types() {
  $objects['islandora/object/'] = t('Islandora');
  return $objects;
}

/**
 * Implements hook_token_info().
 */
function islandora_pathauto_token_info() {
  $info['types']['fedora'] = array(
    'name' => 'Fedora object tokens',
    'description' => t('Tokens for islandora relating to fedora objects'),
    'needs-data' => 'fedora',
  );
  $info['tokens']['fedora']['pid'] = array(
    'name' => t('Object PID'),
    'description' => t('Full PID of object in Fedora repository'),
  );
  $info['tokens']['fedora']['label'] = array(
    'name' => t('Object label'),
    'description' => t('Fedora object label'),
  );
  $info['tokens']['fedora']['shortpid'] = array(
    'name' => t('Short PID'),
    'description' => t('Fedora object pid without namespace'),
  );
  $info['tokens']['fedora']['namespace'] = array(
    'name' => t('Namespace'),
    'description' => t('Fedora object namespace'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function islandora_pathauto_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'fedora' & !empty($data['fedora'])) {
    $object = $data['fedora'];
    $replacements = array();
    foreach ($tokens as $name => $original) {
      if ($name == 'pid') {
        $replacements[$original] = $object->id;
      }
      if ($name == 'shortpid') {
        $temp = explode(':', $object->id, 2);
        $replacements[$original] = $temp[1];
      }
      if ($name == 'namespace') {
        $temp = explode(':', $object->id, 2);
        $replacements[$original] = $temp[0];
      }
      if ($name == 'label') {
        $replacements[$original] = $object->label;
      }
    }
    return $replacements;
  }
  return array();
}

class IslandoraFedoraObjectReadOnly implements ArrayAccess {
  private $fake;
  private $savedLabel;

  /**
   * IslandoraFedoraObjectReadOnly constructor.
   *
   * @param FedoraObject $original
   *   The FedoraObject for which this class is a wrapper.
   */
  public function __construct($original) {
    $this->fake = $original;
    $this->savedLabel = $original->label;
  }

  /**
   * Overload assignment to set label and nothing else.
   *
   * @param string $name
   *   The name of the property being set. Only 'label' will have any effect.
   * @param mixed $value
   *   The value to which the property should be set.
   */
  public function __set($name, $value) {
    if ($name == 'label') {
      $this->savedLabel = $value;
    }
  }

  /**
   * Overload get to pull values from original object (except for label).
   *
   * @param string $name
   *   The name of the property to get.
   *
   * @return string|void
   *   Returns the value of the property.
   */
  public function __get($name) {
    if ($name == 'label') {
      return $this->savedLabel;
    }
    return $this->fake->__get($name);
  }

  /**
   * Implements ArrayAccess.
   */
  public function offsetExists($offset) {
    return isset($this->fake[$offset]);
  }

  /**
   * Implements ArrayAccess.
   */
  public function offsetGet($offset) {
    return $this->fake[$offset];
  }

  /**
   * Implements ArrayAccess.
   */
  public function offsetSet($offset, $value) {}

  /**
   * Implements ArrayAccess.
   */
  public function offsetUnset($offset) {}
}
